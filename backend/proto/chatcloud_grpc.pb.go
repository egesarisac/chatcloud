// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/chatcloud.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatCloud_JoinRoom_FullMethodName       = "/chatcloud.ChatCloud/JoinRoom"
	ChatCloud_SendMessage_FullMethodName    = "/chatcloud.ChatCloud/SendMessage"
	ChatCloud_StreamMessages_FullMethodName = "/chatcloud.ChatCloud/StreamMessages"
	ChatCloud_LeaveRoom_FullMethodName      = "/chatcloud.ChatCloud/LeaveRoom"
)

// ChatCloudClient is the client API for ChatCloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ChatCloud service definition
type ChatCloudClient interface {
	// JoinRoom allows a user to join a chat room
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error)
	// SendMessage allows a user to send a message to a room
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// StreamMessages allows a user to receive messages from a room in real-time
	StreamMessages(ctx context.Context, in *StreamMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error)
	// LeaveRoom allows a user to leave a chat room
	LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*LeaveRoomResponse, error)
}

type chatCloudClient struct {
	cc grpc.ClientConnInterface
}

func NewChatCloudClient(cc grpc.ClientConnInterface) ChatCloudClient {
	return &chatCloudClient{cc}
}

func (c *chatCloudClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinRoomResponse)
	err := c.cc.Invoke(ctx, ChatCloud_JoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatCloudClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, ChatCloud_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatCloudClient) StreamMessages(ctx context.Context, in *StreamMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatCloud_ServiceDesc.Streams[0], ChatCloud_StreamMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMessagesRequest, Message]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatCloud_StreamMessagesClient = grpc.ServerStreamingClient[Message]

func (c *chatCloudClient) LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*LeaveRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveRoomResponse)
	err := c.cc.Invoke(ctx, ChatCloud_LeaveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatCloudServer is the server API for ChatCloud service.
// All implementations must embed UnimplementedChatCloudServer
// for forward compatibility.
//
// ChatCloud service definition
type ChatCloudServer interface {
	// JoinRoom allows a user to join a chat room
	JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error)
	// SendMessage allows a user to send a message to a room
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// StreamMessages allows a user to receive messages from a room in real-time
	StreamMessages(*StreamMessagesRequest, grpc.ServerStreamingServer[Message]) error
	// LeaveRoom allows a user to leave a chat room
	LeaveRoom(context.Context, *LeaveRoomRequest) (*LeaveRoomResponse, error)
	mustEmbedUnimplementedChatCloudServer()
}

// UnimplementedChatCloudServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatCloudServer struct{}

func (UnimplementedChatCloudServer) JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedChatCloudServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatCloudServer) StreamMessages(*StreamMessagesRequest, grpc.ServerStreamingServer[Message]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedChatCloudServer) LeaveRoom(context.Context, *LeaveRoomRequest) (*LeaveRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedChatCloudServer) mustEmbedUnimplementedChatCloudServer() {}
func (UnimplementedChatCloudServer) testEmbeddedByValue()                   {}

// UnsafeChatCloudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatCloudServer will
// result in compilation errors.
type UnsafeChatCloudServer interface {
	mustEmbedUnimplementedChatCloudServer()
}

func RegisterChatCloudServer(s grpc.ServiceRegistrar, srv ChatCloudServer) {
	// If the following call pancis, it indicates UnimplementedChatCloudServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatCloud_ServiceDesc, srv)
}

func _ChatCloud_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatCloudServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatCloud_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatCloudServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatCloud_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatCloudServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatCloud_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatCloudServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatCloud_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatCloudServer).StreamMessages(m, &grpc.GenericServerStream[StreamMessagesRequest, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatCloud_StreamMessagesServer = grpc.ServerStreamingServer[Message]

func _ChatCloud_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatCloudServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatCloud_LeaveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatCloudServer).LeaveRoom(ctx, req.(*LeaveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatCloud_ServiceDesc is the grpc.ServiceDesc for ChatCloud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatCloud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatcloud.ChatCloud",
	HandlerType: (*ChatCloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinRoom",
			Handler:    _ChatCloud_JoinRoom_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ChatCloud_SendMessage_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _ChatCloud_LeaveRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _ChatCloud_StreamMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/chatcloud.proto",
}
