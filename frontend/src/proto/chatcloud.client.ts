// @generated by protobuf-ts 2.9.5
// @generated from protobuf file "chatcloud.proto" (package "chatcloud", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ChatCloud } from "./chatcloud";
import type { LeaveRoomResponse } from "./chatcloud";
import type { LeaveRoomRequest } from "./chatcloud";
import type { Message } from "./chatcloud";
import type { StreamMessagesRequest } from "./chatcloud";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { SendMessageResponse } from "./chatcloud";
import type { SendMessageRequest } from "./chatcloud";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { JoinRoomResponse } from "./chatcloud";
import type { JoinRoomRequest } from "./chatcloud";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * ChatCloud service definition
 *
 * @generated from protobuf service chatcloud.ChatCloud
 */
export interface IChatCloudClient {
    /**
     * JoinRoom allows a user to join a chat room
     *
     * @generated from protobuf rpc: JoinRoom(chatcloud.JoinRoomRequest) returns (chatcloud.JoinRoomResponse);
     */
    joinRoom(input: JoinRoomRequest, options?: RpcOptions): UnaryCall<JoinRoomRequest, JoinRoomResponse>;
    /**
     * SendMessage allows a user to send a message to a room
     *
     * @generated from protobuf rpc: SendMessage(chatcloud.SendMessageRequest) returns (chatcloud.SendMessageResponse);
     */
    sendMessage(input: SendMessageRequest, options?: RpcOptions): UnaryCall<SendMessageRequest, SendMessageResponse>;
    /**
     * StreamMessages allows a user to receive messages from a room in real-time
     *
     * @generated from protobuf rpc: StreamMessages(chatcloud.StreamMessagesRequest) returns (stream chatcloud.Message);
     */
    streamMessages(input: StreamMessagesRequest, options?: RpcOptions): ServerStreamingCall<StreamMessagesRequest, Message>;
    /**
     * LeaveRoom allows a user to leave a chat room
     *
     * @generated from protobuf rpc: LeaveRoom(chatcloud.LeaveRoomRequest) returns (chatcloud.LeaveRoomResponse);
     */
    leaveRoom(input: LeaveRoomRequest, options?: RpcOptions): UnaryCall<LeaveRoomRequest, LeaveRoomResponse>;
}
/**
 * ChatCloud service definition
 *
 * @generated from protobuf service chatcloud.ChatCloud
 */
export class ChatCloudClient implements IChatCloudClient, ServiceInfo {
    typeName = ChatCloud.typeName;
    methods = ChatCloud.methods;
    options = ChatCloud.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * JoinRoom allows a user to join a chat room
     *
     * @generated from protobuf rpc: JoinRoom(chatcloud.JoinRoomRequest) returns (chatcloud.JoinRoomResponse);
     */
    joinRoom(input: JoinRoomRequest, options?: RpcOptions): UnaryCall<JoinRoomRequest, JoinRoomResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<JoinRoomRequest, JoinRoomResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SendMessage allows a user to send a message to a room
     *
     * @generated from protobuf rpc: SendMessage(chatcloud.SendMessageRequest) returns (chatcloud.SendMessageResponse);
     */
    sendMessage(input: SendMessageRequest, options?: RpcOptions): UnaryCall<SendMessageRequest, SendMessageResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendMessageRequest, SendMessageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * StreamMessages allows a user to receive messages from a room in real-time
     *
     * @generated from protobuf rpc: StreamMessages(chatcloud.StreamMessagesRequest) returns (stream chatcloud.Message);
     */
    streamMessages(input: StreamMessagesRequest, options?: RpcOptions): ServerStreamingCall<StreamMessagesRequest, Message> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamMessagesRequest, Message>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * LeaveRoom allows a user to leave a chat room
     *
     * @generated from protobuf rpc: LeaveRoom(chatcloud.LeaveRoomRequest) returns (chatcloud.LeaveRoomResponse);
     */
    leaveRoom(input: LeaveRoomRequest, options?: RpcOptions): UnaryCall<LeaveRoomRequest, LeaveRoomResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<LeaveRoomRequest, LeaveRoomResponse>("unary", this._transport, method, opt, input);
    }
}
